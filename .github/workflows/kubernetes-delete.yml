name: üí• Kubernetes Delete

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
        type: string
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev

env:
  TF_VERSION: '1.5.0'
  MAIN_EVENT_TYPE: "app-main-event"
  CONSUMER_EVENT_TYPE: "app-consumer-event"

jobs:
  infra-outputs:
    name: üì§ Get Infrastructure Outputs
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      application_name: ${{ steps.outputs.outputs.application_name }}
      environment_name: ${{ steps.outputs.outputs.environment_name }}
      primary_region: ${{ steps.outputs.outputs.primary_region }}
      kubernetes_cluster_name: ${{ steps.outputs.outputs.kubernetes_cluster_name }}
      kubernetes_namespace: ${{ steps.outputs.outputs.kubernetes_namespace }}
      kubernetes_service_account_name: ${{ steps.outputs.outputs.kubernetes_service_account_name }}
      alb_controller_role: ${{ steps.outputs.outputs.alb_controller_role }}
      administrator_arns_list: ${{ steps.outputs.outputs.administrator_arns_list }}
      console_access_arn: ${{ steps.outputs.outputs.console_access_arn }}
      workload_identity_role: ${{ steps.outputs.outputs.workload_identity_role }}
      bucket_name: ${{ steps.outputs.outputs.bucket_name }}
      username: ${{ steps.outputs.outputs.username }}
      postgres_dbname: ${{ steps.outputs.outputs.postgres_dbname }}
      postgres_host_endpoint: ${{ steps.outputs.outputs.postgres_host_endpoint }}
      postgresql_secret: ${{ steps.outputs.outputs.postgresql_secret }}
      rabbitmq_secret: ${{ steps.outputs.outputs.rabbitmq_secret }}
      rabbitmq_host_endpoint: ${{ steps.outputs.outputs.rabbitmq_host_endpoint }}
      redis_host_endpoint: ${{ steps.outputs.outputs.redis_host_endpoint }}
      main_image: ${{ steps.get_images.outputs.main_image }}
      consumer_image: ${{ steps.get_images.outputs.consumer_image }}

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: üîç Get Image Tags from Event or ECR
        id: get_images
        run: |
          MAIN_IMAGE_FROM_EVENT=""
          CONSUMER_IMAGE_FROM_EVENT=""

          REGISTRY_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=${{ vars.AWS_REGION }}
          MAIN_REPO="ecr-${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-${{ vars.MAIN_REPOSITORY }}"
          CONSUMER_REPO="ecr-${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-${{ vars.CONSUMER_REPOSITORY }}"

          LATEST_MAIN_IMAGE=$(aws ecr describe-images \
            --repository-name $MAIN_REPO \
            --filter tagStatus=TAGGED \
            --query "sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0] | join('', ['${REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com/', '${MAIN_REPO}:', @])" \
            --output text)

          LATEST_CONSUMER_IMAGE=$(aws ecr describe-images \
            --repository-name $CONSUMER_REPO \
            --filter tagStatus=TAGGED \
            --query "sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0] | join('', ['${REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com/', '${CONSUMER_REPO}:', @])" \
            --output text)
          
          if [[ "${{ github.event.action }}" == ${{ env.MAIN_EVENT_TYPE }} ]]; then
            MAIN_IMAGE_FROM_EVENT="${{ github.event.client_payload.main_image }}" 
          elif [[ "${{ github.event.action }}" == ${{ env.CONSUMER_EVENT_TYPE }} ]]; then
            CONSUMER_IMAGE_FROM_EVENT="${{ github.event.client_payload.consumer_image }}"
          fi

          # Determine final main_image
          if [[ -n "$MAIN_IMAGE_FROM_EVENT" && "$MAIN_IMAGE_FROM_EVENT" != "$LATEST_MAIN_IMAGE" ]]; then
            echo "main_image=$MAIN_IMAGE_FROM_EVENT" >> "$GITHUB_OUTPUT"
            echo "main_image from Event (different from ECR): $MAIN_IMAGE_FROM_EVENT"
          else
            echo "main_image=$LATEST_MAIN_IMAGE" >> "$GITHUB_OUTPUT"
            echo "main_image from ECR (or event was same as ECR): $LATEST_MAIN_IMAGE"
          fi

          # Determine final consumer_image
          if [[ -n "$CONSUMER_IMAGE_FROM_EVENT" && "$CONSUMER_IMAGE_FROM_EVENT" != "$LATEST_CONSUMER_IMAGE" ]]; then
            echo "consumer_image=$CONSUMER_IMAGE_FROM_EVENT" >> "$GITHUB_OUTPUT"
            echo "consumer_image from Event (different from ECR): $CONSUMER_IMAGE_FROM_EVENT"
          else
            echo "consumer_image=$LATEST_CONSUMER_IMAGE" >> "$GITHUB_OUTPUT"
            echo "consumer_image from ECR (or event was same as ECR): $LATEST_CONSUMER_IMAGE"
          fi

      - name: üìä Extract Infrastructure Outputs
        id: outputs
        working-directory: ./src/aws
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" \
            -backend-config="region=${{ vars.TF_BACKEND_REGION }}" \
            -backend-config="key=${{ vars.TF_AWS_BACKEND_KEY }}" \
            -backend-config="encrypt=true"

          echo "application_name=$(terraform output -raw application_name)" >> "$GITHUB_OUTPUT"
          echo "environment_name=$(terraform output -raw environment_name)" >> "$GITHUB_OUTPUT"
          echo "primary_region=$(terraform output -raw primary_region)" >> "$GITHUB_OUTPUT"
          echo "kubernetes_cluster_name=$(terraform output -raw kubernetes_cluster_name)" >> "$GITHUB_OUTPUT"
          echo "kubernetes_namespace=$(terraform output -raw kubernetes_namespace)" >> "$GITHUB_OUTPUT"
          echo "kubernetes_service_account_name=$(terraform output -raw kubernetes_service_account_name)" >> "$GITHUB_OUTPUT"
          echo "alb_controller_role=$(terraform output -raw alb_controller_role)" >> "$GITHUB_OUTPUT"
          echo "console_access_arn=$(terraform output -raw console_access_arn)" >> "$GITHUB_OUTPUT"
          echo "workload_identity_role=$(terraform output -raw workload_identity_role)" >> "$GITHUB_OUTPUT"
          echo "username=$(terraform output -raw username)" >> "$GITHUB_OUTPUT"
          echo "postgres_dbname=$(terraform output -raw postgres_dbname)" >> "$GITHUB_OUTPUT"
          echo "bucket_name=$(terraform output -raw bucket_name)" >> "$GITHUB_OUTPUT"
          echo "postgres_host_endpoint=$(terraform output -raw postgres_host_endpoint)" >> "$GITHUB_OUTPUT"
          echo "rabbitmq_host_endpoint=$(terraform output -raw rabbitmq_host_endpoint)" >> "$GITHUB_OUTPUT"
          echo "postgresql_secret=$(terraform output -raw postgresql_secret)" >> "$GITHUB_OUTPUT"
          echo "rabbitmq_secret=$(terraform output -raw rabbitmq_secret)" >> "$GITHUB_OUTPUT"
          echo "redis_host_endpoint=$(terraform output -raw redis_host_endpoint)" >> "$GITHUB_OUTPUT"


  kubernetes:
    name: ‚ò∏Ô∏è Delete Kubernetes Infrastructure
    runs-on: ubuntu-latest
    needs: infra-outputs
    environment: dev

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.TF_BACKEND_REGION }}

      - name: üîß Initialize Terraform for Kubernetes
        working-directory: ./src/kubernetes
        env:
          TF_VAR_application_name: ${{ needs.infra-outputs.outputs.application_name }}
          TF_VAR_environment_name: ${{ needs.infra-outputs.outputs.environment_name }}
          TF_VAR_primary_region: ${{ needs.infra-outputs.outputs.primary_region }}
          TF_VAR_kubernetes_cluster_name: ${{ needs.infra-outputs.outputs.kubernetes_cluster_name }}
          TF_VAR_kubernetes_namespace: ${{ needs.infra-outputs.outputs.kubernetes_namespace }}
          TF_VAR_kubernetes_service_account_name: ${{ needs.infra-outputs.outputs.kubernetes_service_account_name }}
          TF_VAR_alb_controller_role: ${{ needs.infra-outputs.outputs.alb_controller_role }}
          TF_VAR_workload_identity_role: ${{ needs.infra-outputs.outputs.workload_identity_role }}
          TF_VAR_username: ${{ needs.infra-outputs.outputs.username }}
          TF_VAR_postgres_dbname: ${{ needs.infra-outputs.outputs.postgres_dbname }}
          TF_VAR_bucket_name: ${{ needs.infra-outputs.outputs.bucket_name }}
          TF_VAR_postgres_host_endpoint: ${{ needs.infra-outputs.outputs.postgres_host_endpoint }}
          TF_VAR_rabbitmq_host_endpoint: ${{ needs.infra-outputs.outputs.rabbitmq_host_endpoint }}
          TF_VAR_redis_host_endpoint: ${{ needs.infra-outputs.outputs.redis_host_endpoint }}
          TF_VAR_postgresql_secret: ${{ needs.infra-outputs.outputs.postgresql_secret }}
          TF_VAR_rabbitmq_secret: ${{ needs.infra-outputs.outputs.rabbitmq_secret }}
          TF_VAR_main_image: ${{ needs.infra-outputs.outputs.main_image }}
          TF_VAR_consumer_image: ${{ needs.infra-outputs.outputs.consumer_image }}

        run: |
          terraform fmt -check
          terraform init \
              -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" \
              -backend-config="region=${{ vars.TF_BACKEND_REGION }}" \
              -backend-config="key=${{ vars.TF_KUBERNETES_BACKEND_KEY }}" \
              -backend-config="encrypt=true"

          terraform destroy -auto-approve -target=kubernetes_deployment.main
          terraform destroy -auto-approve


