name: ‚ò∏Ô∏è Kubernetes Deployment

on:
  push:
    branches: [main]
    paths: ['src/kubernetes/**']
  workflow_dispatch:
  repository_dispatch:
    types: [app-main-event, app-consumer-event]
  # workflow_run:
  #   workflows: ["üì¶ App Main Build", "üì¶ App Consumer Build"]
  #   types: [completed]
  #   branches: [main]

env:
  TF_VERSION: '1.5.0'
  MAIN_EVENT_TYPE: "app-main-event"
  CONSUMER_EVENT_TYPE: "app-consumer-event"

jobs:
  infra-outputs:
    name: üì§ Get Infrastructure Outputs
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      application_name: ${{ steps.outputs.outputs.application_name }}
      environment_name: ${{ steps.outputs.outputs.environment_name }}
      primary_region: ${{ steps.outputs.outputs.primary_region }}
      kubernetes_cluster_name: ${{ steps.outputs.outputs.kubernetes_cluster_name }}
      kubernetes_namespace: ${{ steps.outputs.outputs.kubernetes_namespace }}
      kubernetes_service_account_name: ${{ steps.outputs.outputs.kubernetes_service_account_name }}
      alb_controller_role: ${{ steps.outputs.outputs.alb_controller_role }}
      workload_identity_role: ${{ steps.outputs.outputs.workload_identity_role }}
      bucket_name: ${{ steps.outputs.outputs.bucket_name }}
      postgres_host_endpoint: ${{ steps.outputs.outputs.postgres_host_endpoint }}
      rabbitmq_host_endpoint: ${{ steps.outputs.outputs.rabbitmq_host_endpoint }}
      redis_host_endpoint: ${{ steps.outputs.outputs.redis_host_endpoint }}
      main_image_tag: ${{ steps.determine_images.outputs.main_image_tag }}
      consumer_image_tag: ${{ steps.determine_images.outputs.consumer_image_tag }}

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get Image Tags from Event or ECR
        id: determine_images
        run: |
          MAIN_IMAGE_FROM_EVENT=""
          CONSUMER_IMAGE_FROM_EVENT=""
          LATEST_MAIN_IMAGE=""
          LATEST_CONSUMER_IMAGE=""

          # --- Fetch latest ECR images first ---
          LATEST_MAIN_IMAGE=$(aws ecr describe-images \
            --repository-name ecr-app-dev-main \
            --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
            --output text)
          
          LATEST_CONSUMER_IMAGE=$(aws ecr describe-images \
            --repository-name ecr-app-dev-consumer \
            --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
            --output text)

          # --- Extract image tags from repository_dispatch event ---
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            if [[ "${{ github.event.action }}" == ${{ env.MAIN_EVENT_TYPE }} ]]; then
              # Using 'main_image_tag' from client_payload as defined in the build workflow
              MAIN_IMAGE_FROM_EVENT="${{ github.event.client_payload.main_image_tag }}" 
            elif [[ "${{ github.event.action }}" == ${{ env.CONSUMER_EVENT_TYPE }} ]]; then
              # Assuming consumer payload key is still 'consumer_image'
              CONSUMER_IMAGE_FROM_EVENT="${{ github.event.client_payload.consumer_image }}"
            fi
          fi

          # --- Determine final main_image_tag ---
          if [[ -n "$MAIN_IMAGE_FROM_EVENT" && "$MAIN_IMAGE_FROM_EVENT" != "$LATEST_MAIN_IMAGE" ]]; then
            echo "main_image_tag=$MAIN_IMAGE_FROM_EVENT" >> "$GITHUB_OUTPUT"
            echo "main_image_tag from Event (different from ECR): $MAIN_IMAGE_FROM_EVENT"
          else
            echo "main_image_tag=$LATEST_MAIN_IMAGE" >> "$GITHUB_OUTPUT"
            echo "main_image_tag from ECR (or event was same as ECR): $LATEST_MAIN_IMAGE"
          fi

          # --- Determine final consumer_image_tag ---
          if [[ -n "$CONSUMER_IMAGE_FROM_EVENT" && "$CONSUMER_IMAGE_FROM_EVENT" != "$LATEST_CONSUMER_IMAGE" ]]; then
            echo "consumer_image_tag=$CONSUMER_IMAGE_FROM_EVENT" >> "$GITHUB_OUTPUT"
            echo "consumer_image_tag from Event (different from ECR): $CONSUMER_IMAGE_FROM_EVENT"
          else
            echo "consumer_image_tag=$LATEST_CONSUMER_IMAGE" >> "$GITHUB_OUTPUT"
            echo "consumer_image_tag from ECR (or event was same as ECR): $LATEST_CONSUMER_IMAGE"
          fi

      - name: üìä Extract Infrastructure Outputs
        id: outputs
        working-directory: ./src/aws
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" \
            -backend-config="region=${{ vars.TF_BACKEND_REGION }}" \
            -backend-config="key=${{ vars.TF_AWS_BACKEND_KEY }}" \
            -backend-config="encrypt=true"

          echo "application_name=$(terraform output -raw application_name)" >> "$GITHUB_OUTPUT"
          echo "environment_name=$(terraform output -raw environment_name)" >> "$GITHUB_OUTPUT"
          echo "primary_region=$(terraform output -raw primary_region)" >> "$GITHUB_OUTPUT"
          echo "kubernetes_cluster_name=$(terraform output -raw kubernetes_cluster_name)" >> "$GITHUB_OUTPUT"
          echo "kubernetes_namespace=$(terraform output -raw kubernetes_namespace)" >> "$GITHUB_OUTPUT"
          echo "kubernetes_service_account_name=$(terraform output -raw kubernetes_service_account_name)" >> "$GITHUB_OUTPUT"
          echo "alb_controller_role=$(terraform output -raw alb_controller_role)" >> "$GITHUB_OUTPUT"
          echo "workload_identity_role=$(terraform output -raw workload_identity_role)" >> "$GITHUB_OUTPUT"
          echo "bucket_name=$(terraform output -raw bucket_name)" >> "$GITHUB_OUTPUT"
          echo "postgres_host_endpoint=$(terraform output -raw postgres_host_endpoint)" >> "$GITHUB_OUTPUT"
          echo "rabbitmq_host_endpoint=$(terraform output -raw rabbitmq_host_endpoint)" >> "$GITHUB_OUTPUT"
          echo "redis_host_endpoint=$(terraform output -raw redis_host_endpoint)" >> "$GITHUB_OUTPUT"


  kubernetes:
    name: ‚ò∏Ô∏è Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: infra-outputs
    environment: dev

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.TF_BACKEND_REGION }}

      - name: üîß Initialize Terraform for Kubernetes
        working-directory: ./src/kubernetes
        env:
          TF_VAR_application_name: ${{ needs.infra-outputs.outputs.application_name }}
          TF_VAR_environment_name: ${{ needs.infra-outputs.outputs.environment_name }}
          TF_VAR_primary_region: ${{ needs.infra-outputs.outputs.primary_region }}
          TF_VAR_kubernetes_cluster_name: ${{ needs.infra-outputs.outputs.kubernetes_cluster_name }}
          TF_VAR_kubernetes_namespace: ${{ needs.infra-outputs.outputs.kubernetes_namespace }}
          TF_VAR_kubernetes_service_account_name: ${{ needs.infra-outputs.outputs.kubernetes_service_account_name }}
          TF_VAR_alb_controller_role: ${{ needs.infra-outputs.outputs.alb_controller_role }}
          TF_VAR_workload_identity_role: ${{ needs.infra-outputs.outputs.workload_identity_role }}
          TF_VAR_bucket_name: ${{ needs.infra-outputs.outputs.bucket_name }}
          TF_VAR_postgres_host_endpoint: ${{ needs.infra-outputs.outputs.postgres_host_endpoint }}
          TF_VAR_rabbitmq_host_endpoint: ${{ needs.infra-outputs.outputs.rabbitmq_host_endpoint }}
          TF_VAR_redis_host_endpoint: ${{ needs.infra-outputs.outputs.redis_host_endpoint }}
          TF_VAR_main_image_tag: ${{ needs.infra-outputs.outputs.main_image_tag }}
          TF_VAR_consumer_image_tag: ${{ needs.infra-outputs.outputs.consumer_image_tag }}

        run: |
          terraform fmt -check
          terraform init \
              -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" \
              -backend-config="region=${{ vars.TF_BACKEND_REGION }}" \
              -backend-config="key=${{ vars.TF_KUBERNETES_BACKEND_KEY }}" \
              -backend-config="encrypt=true"

          terraform validate

          echo "main_image_tag passed to Terraform: $TF_VAR_main_image_tag"
          echo "consumer_image_tag passed to Terraform: $TF_VAR_consumer_image_tag"

          # terraform apply -auto-approve -target=helm_release.csi_secrets_store
          # terraform apply -auto-approve

      - name: üõ†Ô∏è Setup eksctl CLI Tool
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          rm eksctl_$PLATFORM.tar.gz
          eksctl version
